# -*- coding: utf-8 -*-
"""ingredientscheck.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1w-JrOIrc0xcfoT7Kb2wk4rXQevPv78qB
"""

!pip install flask pandas requests rapidfuzz
!pip install flask-ngrok
!pip install flask
!wget https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
!unzip ngrok-stable-linux-amd64.zip
from flask import Flask
from threading import Thread
import time
from flask_ngrok import run_with_ngrok
from flask import Flask, request, jsonify
import pandas as pd
import requests
from rapidfuzz import fuzz
import random

app = Flask(__name__)
@app.route('/')
def home():
    return "Flask app is running!"

def run():
    app.run(host='0.0.0.0', port=5000)

def start_ngrok():
    get_ipython().system_raw('./ngrok http 5000 &')
    time.sleep(4)
    !curl -s http://localhost:4040/api/tunnels | jq '.tunnels[0].public_url'

# Start Flask + ngrok tunnel
Thread(target=run).start()
start_ngrok()

app.run()
# âœ… CONFIG: replace with your actual URLs/API key
url_sheet = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRjH81MRqTWHRy-tfZabAfy0B0N4XQbGAnbrB1nHUcl3yo6uqks89jctc6tHVcNrdyWPABV1Cn2M07h/pub?output=csv'
API_KEY = 'dbe123efa98642f79dcfbd9612db1557'
from flask import Flask, request, jsonify
import pandas as pd
import requests
from rapidfuzz import fuzz
import random

app = Flask(__name__)

# CONFIG
GOOGLE_SHEET_CSV = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vRjH81MRqTWHRy-tfZabAfy0B0N4XQbGAnbrB1nHUcl3yo6uqks89jctc6tHVcNrdyWPABV1Cn2M07h/pub?output=csv'
SPOONACULAR_API_KEY = 'dbe123efa98642f79dcfbd9612db1557'

# Load pantry/commissary list
df = pd.read_csv(GOOGLE_SHEET_CSV)
df.columns = df.columns.str.strip()

# Fuzzy match function
def fuzzy_match(ingredient, threshold=80):
    best_score = 0
    best_row = None
    for idx, row in df.iterrows():
        score = fuzz.partial_ratio(ingredient.lower(), row['Item'].lower())
        if score > best_score:
            best_score = score
            best_row = row
    if best_score >= threshold:
        return best_row
    else:
        return None

# Recipe checker
def get_matching_recipes(dish_type, threshold=0.9):
    matching_recipes = []
    batch_size = 10
    max_offset = 50

    while len(matching_recipes) < 3:
        offset = random.randint(0, max_offset)
        search_url = f'https://api.spoonacular.com/recipes/complexSearch?diet=whole30&type={dish_type}&number={batch_size}&offset={offset}&apiKey={SPOONACULAR_API_KEY}'
        search_resp = requests.get(search_url)
        search_data = search_resp.json()

        if 'results' not in search_data or not search_data['results']:
            break

        recipes = search_data['results']
        random.shuffle(recipes)

        for recipe in recipes:
            recipe_id = recipe['id']
            info_url = f'https://api.spoonacular.com/recipes/{recipe_id}/information?includeNutrition=false&apiKey={SPOONACULAR_API_KEY}'
            info_resp = requests.get(info_url)
            info_data = info_resp.json()

            ingredients = [ing['name'] for ing in info_data['extendedIngredients']]
            available = [ing for ing in ingredients if fuzzy_match(ing)]
            percent_available = len(available) / len(ingredients)

            if percent_available >= threshold:
                matching_recipes.append({
                    'title': info_data['title'],
                    'url': info_data['sourceUrl']
                })

            if len(matching_recipes) >= 3:
                break

    return matching_recipes

@app.route('/get_recipes', methods=['GET'])
def get_recipes():
    dish_type = request.args.get('dish_type', 'side dish')
    recipes = get_matching_recipes(dish_type)
    return jsonify({'recipes': recipes})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)